name: Python 代码质量与安全审查流水线

on:
  pull_request:

jobs:
  安全与质量审查:
    name: "安全与质量审查（Python）"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
    # ==================== 初始化阶段 ====================
    - name: 检出代码仓库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # ==================== 配置准备阶段 ====================
    - name: 加载检查规则
      run: |
        mkdir -p .github/linters
        [ -f .github/linters/flake8 ] || touch .github/linters/flake8
        ln -sf .github/linters/flake8 .flake8 || true
        ln -sf .github/linters/mypy.ini mypy.ini || true
        ln -sf .github/linters/pyproject.toml pyproject.toml || true

    # ==================== 环境设置阶段 ====================
    - name: 配置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y fonts-wqy-zenhei jq

    - name: 安装分析工具
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy safety bandit \
                  pip-licenses trufflehog3 matplotlib \
                  pandas coscmd
        pip install -r requirements.txt

    # ==================== 代码质量审查阶段 ====================
    - name: 执行代码规范检查
      run: |
        echo "开始代码规范检查..."
        flake8 . --config .github/linters/flake8
        black --check . --config .github/linters/pyproject.toml
        mypy . --config-file .github/linters/mypy.ini

    # ==================== 安全审查阶段 ====================
    - name: 执行安全扫描
      run: |
        echo "启动安全扫描..."
        pip freeze | safety check --stdin --output json > safety.json
        bandit -r . -f json -o bandit.json
        trufflehog filesystem --directory . --json > trufflehog.json
        pip-licenses --format=json > licenses.json

    # ==================== 安全评分系统 ====================
    - name: 计算安全评分
      id: 安全评分
      run: |
        echo "正在计算安全评分..."
        安全权重=10
        高危权重=8
        中危权重=5
        低危权重=2
        敏感权重=20
        许可权重=3

        依赖漏洞数=$(jq '.vulnerabilities | length' safety.json)
        高危问题数=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit.json)
        中危问题数=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit.json)
        低危问题数=$(jq '[.results[] | select(.issue_severity == "LOW")] | length' bandit.json)
        敏感信息数=$(jq 'length' trufflehog.json)
        许可问题数=$(jq 'map(select(.License | test("MIT|Apache|BSD") | not)) | length' licenses.json)

        总扣分=$((依赖漏洞数*安全权重 + 高危问题数*高危权重 + 中危问题数*中危权重 + 
                低危问题数*低危权重 + 敏感信息数*敏感权重 + 许可问题数*许可权重))

        最终评分=$((100 - 总扣分))
        最终评分=$((最终评分 < 0 ? 0 : 最终评分))

        if (( 最终评分 >= 90 )); then 评级="🟢 ★★★★★"
        elif (( 最终评分 >= 75 )); then 评级="🟢 ★★★★☆"
        elif (( 最终评分 >= 60 )); then 评级="🟡 ★★★☆☆"
        elif (( 最终评分 >= 40 )); then 评级="🟠 ★★☆☆☆"
        else 评级="🔴 ★☆☆☆☆"; fi

        echo "安全评分=$最终评分" >> $GITHUB_ENV
        echo "安全评级='$评级'" >> $GITHUB_ENV
        echo "SCORE=$最终评分" >> $GITHUB_OUTPUT

    # ==================== 可视化报告生成 ====================
    - name: 生成安全态势图
      run: |
        echo "生成可视化报告..."
        python3 <<EOF
        import matplotlib.pyplot as plt
        import numpy as np
        
        plt.rcParams['font.family'] = 'WenQuanYi Zen Hei'
        
        指标数据 = {
            '依赖安全': int("$依赖漏洞数"),
            '代码风险': int("$高危问题数") + int("$中危问题数"),
            '敏感信息': int("$敏感信息数"),
            '许可合规': int("$许可问题数")
        }
        
        标签 = list(指标数据.keys())
        数值 = list(指标数据.values())
        角度 = np.linspace(0, 2*np.pi, len(标签), endpoint=False)
        
        图形, 坐标系 = plt.subplots(figsize=(10,10), subplot_kw={'polar': True})
        坐标系.plot(np.append(角度, 角度[0]), np.append(数值, 数值[0]), 'b-', lw=2)
        坐标系.fill(np.append(角度, 角度[0]), np.append(数值, 数值[0]), 'b', alpha=0.1)
        坐标系.set_theta_offset(np.pi/2)
        坐标系.set_xticks(角度)
        坐标系.set_xticklabels(标签, fontsize=14)
        plt.savefig('.github/安全态势图.png', bbox_inches='tight')
        EOF

    # ==================== 云端归档阶段 ====================
    - name: 配置腾讯云存储
      run: |
        coscmd config -a ${{ secrets.COS_SECRET_ID }} \
                     -s ${{ secrets.COS_SECRET_KEY }} \
                     -b ${{ vars.COS_BUCKET }} \
                     -r ${{ vars.COS_REGION }}

    - name: 归档分析结果
      run: |
        归档路径="安全报告/$(date +%Y年%m月)/${{ github.run_number }}"
        coscmd upload .github/安全态势图.png "$归档路径/安全态势图.png"
        coscmd upload safety.json "$归档路径/原始数据/依赖安全.json"
        coscmd upload bandit.json "$归档路径/原始数据/代码问题.json"
        echo "报告地址=https://pr.mizhoubaobei.top/$归档路径/安全态势图.png" >> $GITHUB_ENV

    # ==================== 审查结果反馈 ====================
    - name: 提交PR审查报告
      uses: actions/github-script@v7
      with:
        script: |
          const 报告内容 = `
          ## 📊 代码安全审查报告
          **综合安全评分**: ${process.env.安全评分} ${process.env.安全评级}
          
          ### 关键指标
          | 检查项       | 问题数量 |
          |-------------|----------|
          | 依赖漏洞    | ${process.env.依赖漏洞数} |
          | 高危代码问题 | ${process.env.高危问题数} |
          | 敏感信息泄露 | ${process.env.敏感信息数} |
          | 许可协议问题 | ${process.env.许可问题数} |
          
          [查看完整报告](${process.env.报告地址})
          
          ![安全态势图](${process.env.报告地址}?${Date.now()})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 报告内容
          });

    # ==================== 质量门禁控制 ====================
    - name: 执行质量门禁
      if: ${{ env.安全评分 < 60 }}
      run: |
        echo "::error::代码安全评分不足（当前：${{ env.安全评分 }}/100），请修复问题后重新提交！"
        exit 1