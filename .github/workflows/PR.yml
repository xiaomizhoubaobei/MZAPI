name: Python 代码质量与安全审查流水线

on:
  pull_request:

jobs:
  security-check:
    name: "安全与质量审查（Python）"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
    # ==================== 初始化阶段 ====================
    - name: 检出代码仓库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # ==================== 配置准备阶段 ====================
    - name: 加载检查规则
      run: |
        mkdir -p .github/linters
        [ -f .github/linters/flake8 ] || touch .github/linters/flake8
        ln -sf .github/linters/flake8 .flake8
        ln -sf .github/linters/mypy.ini mypy.ini
        ln -sf .github/linters/pyproject.toml pyproject.toml

    # ==================== 环境设置阶段 ====================
    - name: 配置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y fonts-wqy-zenhei jq

    - name: 安装分析工具
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy safety bandit \
                  pip-licenses trufflehog3 matplotlib \
                  pandas coscmd
        pip install -r requirements.txt

    # ==================== 代码质量审查阶段 ====================
    - name: 执行代码规范检查
      run: |
        flake8 . --config .flake8
        black --check . --config pyproject.toml
        mypy . --config-file mypy.ini

    # ==================== 安全审查阶段 ====================
    - name: 执行安全扫描
      run: |
        pip freeze | safety check --stdin --output json > safety.json
        bandit -r . -f json -o bandit.json
        trufflehog3 filesystem --directory . --json > trufflehog.json
        pip-licenses --format=json > licenses.json

    # ==================== 安全评分系统 ====================
    - name: 计算安全评分
      id: security-scoring
      run: |
        # 权重配置
        SAFETY_WEIGHT=10
        HIGH_RISK_WEIGHT=8
        MEDIUM_RISK_WEIGHT=5
        LOW_RISK_WEIGHT=2
        SECRETS_WEIGHT=20
        LICENSE_WEIGHT=3

        # 数据采集
        SAFETY_ISSUES=$(jq '.vulnerabilities | length' safety.json)
        HIGH_RISK_ISSUES=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit.json)
        MEDIUM_RISK_ISSUES=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit.json)
        LOW_RISK_ISSUES=$(jq '[.results[] | select(.issue_severity == "LOW")] | length' bandit.json)
        SECRETS_FOUND=$(jq 'length' trufflehog.json)
        LICENSE_ISSUES=$(jq 'map(select(.License | test("MIT|Apache|BSD") | not)) | length' licenses.json)

        # 计算逻辑
        TOTAL_DEDUCTION=$((SAFETY_ISSUES*SAFETY_WEIGHT + HIGH_RISK_ISSUES*HIGH_RISK_WEIGHT + 
                          MEDIUM_RISK_ISSUES*MEDIUM_RISK_WEIGHT + LOW_RISK_ISSUES*LOW_RISK_WEIGHT + 
                          SECRETS_FOUND*SECRETS_WEIGHT + LICENSE_ISSUES*LICENSE_WEIGHT))

        FINAL_SCORE=$((100 - TOTAL_DEDUCTION))
        FINAL_SCORE=$((FINAL_SCORE < 0 ? 0 : FINAL_SCORE))

        # 评级系统
        if (( FINAL_SCORE >= 90 )); then RATING="🟢 ★★★★★"
        elif (( FINAL_SCORE >= 75 )); then RATING="🟢 ★★★★☆"
        elif (( FINAL_SCORE >= 60 )); then RATING="🟡 ★★★☆☆"
        elif (( FINAL_SCORE >= 40 )); then RATING="🟠 ★★☆☆☆"
        else RATING="🔴 ★☆☆☆☆"; fi

        # 输出变量
        echo "SECURITY_SCORE=$FINAL_SCORE" >> $GITHUB_ENV
        echo "SECURITY_RATING='$RATING'" >> $GITHUB_ENV
        echo "SAFETY_ISSUES=$SAFETY_ISSUES" >> $GITHUB_ENV
        echo "HIGH_RISK_ISSUES=$HIGH_RISK_ISSUES" >> $GITHUB_ENV
        echo "MEDIUM_RISK_ISSUES=$MEDIUM_RISK_ISSUES" >> $GITHUB_ENV
        echo "LOW_RISK_ISSUES=$LOW_RISK_ISSUES" >> $GITHUB_ENV
        echo "SECRETS_FOUND=$SECRETS_FOUND" >> $GITHUB_ENV
        echo "LICENSE_ISSUES=$LICENSE_ISSUES" >> $GITHUB_ENV

    # ==================== 可视化报告生成 ====================
    - name: 生成安全态势图
      run: |
        python3 <<EOF
        import matplotlib.pyplot as plt
        import numpy as np
        
        plt.rcParams['font.family'] = 'WenQuanYi Zen Hei'
        
        metrics = {
            '依赖安全': int("$SAFETY_ISSUES"),
            '代码风险': int("$HIGH_RISK_ISSUES") + int("$MEDIUM_RISK_ISSUES"),
            '敏感信息': int("$SECRETS_FOUND"),
            '许可合规': int("$LICENSE_ISSUES")
        }
        
        labels = list(metrics.keys())
        values = list(metrics.values())
        angles = np.linspace(0, 2*np.pi, len(labels), endpoint=False)
        
        fig, ax = plt.subplots(figsize=(10,10), subplot_kw={'polar': True})
        ax.plot(np.append(angles, angles[0]), np.append(values, values[0]), 'b-', lw=2)
        ax.fill(np.append(angles, angles[0]), np.append(values, values[0]), 'b', alpha=0.1)
        ax.set_theta_offset(np.pi/2)
        ax.set_xticks(angles)
        ax.set_xticklabels(labels, fontsize=14)
        plt.savefig('security-radar.png', bbox_inches='tight', dpi=100)
        EOF

    # ==================== 云端归档阶段 ====================
    - name: 配置腾讯云存储
      run: |
        coscmd config -a ${{ secrets.COS_SECRET_ID }} \
                     -s ${{ secrets.COS_SECRET_KEY }} \
                     -b ${{ secrets.COS_BUCKET }} \
                     -r ${{ secrets.COS_REGION }}

    - name: 归档分析结果
      run: |
        DATE_PATH=$(date +"%Y%m%d")
        ARCHIVE_PATH="security-reports/${DATE_PATH}/run-${{ github.run_number }}"
        coscmd upload security-radar.png "${ARCHIVE_PATH}/security-radar.png"
        coscmd upload safety.json "${ARCHIVE_PATH}/safety.json"
        coscmd upload bandit.json "${ARCHIVE_PATH}/bandit.json"
        echo "REPORT_URL=https://pr.mizhoubaobei.top/${ARCHIVE_PATH}/security-radar.png" >> $GITHUB_ENV

    # ==================== 审查结果反馈 ====================
    - name: 提交PR审查报告
      uses: actions/github-script@v7
      env:
        REPORT_URL: ${{ env.REPORT_URL }}
        SCORE: ${{ env.SECURITY_SCORE }}
        RATING: ${{ env.SECURITY_RATING }}
        SAFETY_ISSUES: ${{ env.SAFETY_ISSUES }}
        HIGH_RISK_ISSUES: ${{ env.HIGH_RISK_ISSUES }}
        SECRETS_FOUND: ${{ env.SECRETS_FOUND }}
        LICENSE_ISSUES: ${{ env.LICENSE_ISSUES }}
      with:
        script: |
          const timestamp = new Date().getTime()
          const reportBody = `## 📊 代码安全审查报告
          **综合安全评分**: ${process.env.SCORE} ${process.env.RATING}

          ### 关键指标
          | 检查项       | 问题数量 |
          |-------------|----------|
          | 依赖漏洞    | ${process.env.SAFETY_ISSUES} |
          | 高危代码问题 | ${process.env.HIGH_RISK_ISSUES} |
          | 敏感信息泄露 | ${process.env.SECRETS_FOUND} |
          | 许可协议问题 | ${process.env.LICENSE_ISSUES} |

          [查看完整报告](${process.env.REPORT_URL}?t=${timestamp})

          ![安全态势图](${process.env.REPORT_URL}?t=${timestamp})`

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reportBody
          })

    # ==================== 质量门禁控制 ====================
    - name: 执行质量门禁
      if: ${{ env.SECURITY_SCORE < 60 }}
      run: |
        echo "::error::代码安全评分不足（当前：${{ env.SECURITY_SCORE }}/100），请修复问题后重新提交！"
        exit 1