name: 自动化处理PR

on: [pull_request]

jobs:
  audit:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8,3.9, 3.10, 3.11, 3.12]

    permissions:
      id-token: write
      contents: read
      attestations: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint bandit flake8 mypy

      - name: Run Pylint
        run: |
          pylint --output-format=text --msg-template="{path}:{line}: {msg_id}({symbol}), {msg}" --reports=n $(git ls-files '*.py') > pylint_results.txt

      - name: Run Bandit
        run: |
          bandit -r . > bandit_results.txt

      - name: Run Flake8
        run: |
          flake8 . > flake8_results.txt

      - name: Run Mypy
        run: |
          mypy --ignore-missing-imports $(git ls-files '*.py') > mypy_results.txt

      - name: Analyze Loops
        run: |
          python .github/scripts/loop_analyzer.py > loop_analyzer_results.txt

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: audit-results
          path: |
            bandit_results.txt
            flake8_results.txt
            mypy_results.txt
            loop_analyzer_results.txt

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'audit-results'  # 构件路径

      - name: Comment results to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const results = [
              { name: 'Pylint Results', file: 'pylint_results.txt' },
              { name: 'Bandit Results', file: 'bandit_results.txt' },
              { name: 'Flake8 Results', file: 'flake8_results.txt' },
              { name: 'Mypy Results', file: 'mypy_results.txt' },
              { name: 'Loop Analyzer Results', file: 'loop_analyzer_results.txt' },
            ];

            let commentBody = '## Code Audit Results\n\n';

            for (const result of results) {
              const filePath = path.join(process.env.GITHUB_WORKSPACE, result.file);
              if (fs.existsSync(filePath)) {
                const content = fs.readFileSync(filePath, 'utf8').trim();
                if (content) {
                  commentBody += `### ${result.name}\n\`\`\`\n${content}\n\`\`\`\n\n`;
                }
              }
            }

            if (commentBody !== '## Code Audit Results\n\n') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }