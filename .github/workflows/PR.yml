name: Python 代码质量与安全审查流水线增强版

on:
  pull_request:

jobs:
  security-check:
    name: "安全审查 - ${{ matrix.os }} Py${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    timeout-minutes: 60
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
    # ==================== 初始化阶段 ====================
    - name: 检出代码仓库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # ==================== 配置准备阶段 ====================
    - name: 加载检查规则
      shell: bash
      run: |
        mkdir -p .github/linters
        [ -f .github/linters/flake8 ] || echo "[flake8]\nignore = E501,W503" > .github/linters/flake8
        ln -sf .github/linters/flake8 .flake8 || true
        ln -sf .github/linters/mypy.ini mypy.ini || true
        ln -sf .github/linters/pyproject.toml pyproject.toml || true

    # ==================== 环境设置阶段 ====================
    - name: 配置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 安装系统依赖
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update -qq
          sudo apt-get install -yq fonts-wqy-zenhei jq fontconfig
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install jq
          fc-cache -fv
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          choco install jq -y
        fi

    - name: 安装分析工具
      run: |
        python -m pip install --upgrade pip wheel
        pip install \
          flake8 \
          black \
          mypy \
          safety \
          bandit \
          pip-licenses \
          trufflehog3 \
          matplotlib \
          pandas \
          coscmd

        # 验证关键工具
        bandit --version
        trufflehog3 --version


    # ==================== 安全审查阶段 ====================
    - name: 执行安全扫描
      if: ${{ matrix.is-main || matrix.os == 'ubuntu-latest' }}
      run: |
        # 清理旧报告
        rm -f ./*.json || true

        # 依赖安全检查
        pip freeze | safety check --stdin --output json > safety.json || echo '{"vulnerabilities": []}' > safety.json

        # 代码漏洞扫描
        bandit -r . -f json -o bandit.json --exclude tests,venv,.github || echo '{"results": []}' > bandit.json

        # 敏感信息检测
        trufflehog3 . -f json --max_depth 1 2>&1 | \
          grep '^{' | \
          jq -c '. | select(.Found == true)' | \
          jq -s '.' > trufflehog.json || echo '[]' > trufflehog.json

        # 许可证检查
        pip-licenses --format=json | \
          jq 'map(select(.License != null))' > licenses.json || echo '[]' > licenses.json

    # ==================== 数据验证阶段 ====================
    - name: 验证扫描结果
      if: ${{ matrix.is-main }}
      run: |
        validate_json() {
          local file=$1
          if ! jq empty "$file" 2>/dev/null; then
            echo "修复无效的JSON文件: $file"
            case "$file" in
              *safety.json) echo '{"vulnerabilities": []}' > "$file" ;;
              *bandit.json) echo '{"results": []}' > "$file" ;;
              *) echo '[]' > "$file" ;;
            esac
          fi
        }

        validate_json safety.json
        validate_json bandit.json
        validate_json trufflehog.json
        validate_json licenses.json

    # ==================== 安全评分系统 ====================
    - name: 计算安全评分
      if: ${{ matrix.is-main }}
      id: security-scoring
      run: |
        # 权重配置（可调整）
        declare -A WEIGHTS=(
          [SAFETY]=10    # 依赖漏洞
          [HIGH]=8       # 高危问题
          [MEDIUM]=5     # 中危问题
          [LOW]=2        # 低危问题
          [SECRETS]=20   # 敏感信息
          [LICENSE]=3    # 许可协议
        )

        # 安全数据采集
        SAFETY_ISSUES=$(jq '.vulnerabilities | length // 0' safety.json)
        HIGH_RISK_ISSUES=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length // 0' bandit.json)
        MEDIUM_RISK_ISSUES=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length // 0' bandit.json)
        LOW_RISK_ISSUES=$(jq '[.results[] | select(.issue_severity == "LOW")] | length // 0' bandit.json)
        SECRETS_FOUND=$(jq 'length // 0' trufflehog.json)
        LICENSE_ISSUES=$(jq 'map(select(.License | test("^MIT$|^Apache-2.0$|^BSD-")) | not) | length // 0' licenses.json)

        # 计算总扣分
        TOTAL_DEDUCTION=$((
          SAFETY_ISSUES * WEIGHTS[SAFETY] +
          HIGH_RISK_ISSUES * WEIGHTS[HIGH] +
          MEDIUM_RISK_ISSUES * WEIGHTS[MEDIUM] +
          LOW_RISK_ISSUES * WEIGHTS[LOW] +
          SECRETS_FOUND * WEIGHTS[SECRETS] +
          LICENSE_ISSUES * WEIGHTS[LICENSE]
        ))

        # 计算最终得分
        FINAL_SCORE=$((100 - TOTAL_DEDUCTION))
        FINAL_SCORE=$((FINAL_SCORE < 0 ? 0 : FINAL_SCORE))

        # 评级系统
        RATING_SYSTEM=(
          "90:🟢 ★★★★★"
          "75:🟢 ★★★★☆"
          "60:🟡 ★★★☆☆"
          "40:🟠 ★★☆☆☆"
          "0:🔴 ★☆☆☆☆"
        )
        FINAL_RATING="🔴 ★☆☆☆☆"
        for level in "${RATING_SYSTEM[@]}"; do
          IFS=':' read -r threshold rating <<< "$level"
          if (( FINAL_SCORE >= threshold )); then
            FINAL_RATING="$rating"
            break
          fi
        done

        # 输出环境变量
        echo "SECURITY_SCORE=$FINAL_SCORE" >> $GITHUB_ENV
        echo "SECURITY_RATING='$FINAL_RATING'" >> $GITHUB_ENV
        echo "SAFETY_ISSUES=$SAFETY_ISSUES" >> $GITHUB_ENV
        echo "HIGH_RISK_ISSUES=$HIGH_RISK_ISSUES" >> $GITHUB_ENV
        echo "MEDIUM_RISK_ISSUES=$MEDIUM_RISK_ISSUES" >> $GITHUB_ENV
        echo "LOW_RISK_ISSUES=$LOW_RISK_ISSUES" >> $GITHUB_ENV
        echo "SECRETS_FOUND=$SECRETS_FOUND" >> $GITHUB_ENV
        echo "LICENSE_ISSUES=$LICENSE_ISSUES" >> $GITHUB_ENV

    # ==================== 可视化报告生成 ====================
    - name: 生成安全态势图
      if: ${{ matrix.is-main }}
      run: |
        fc-cache -fv > /dev/null  # 刷新字体缓存
        
        python3 <<EOF
        import matplotlib.pyplot as plt
        import numpy as np
        from matplotlib import rcParams
        from matplotlib.font_manager import FontManager
        
        try:
            # 自动检测中文字体
            fm = FontManager()
            if any('WenQuanYi' in f.name for f in fm.ttflist):
                rcParams['font.family'] = 'WenQuanYi Zen Hei'
            else:
                rcParams['font.family'] = 'sans-serif'
            
            rcParams['axes.unicode_minus'] = False
            
            categories = ['依赖安全', '高危问题', '中危问题', '敏感信息', '许可合规']
            values = [
                int("$SAFETY_ISSUES"),
                int("$HIGH_RISK_ISSUES"),
                int("$MEDIUM_RISK_ISSUES"),
                int("$SECRETS_FOUND"),
                int("$LICENSE_ISSUES")
            ]
            
            angles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()
            values += values[:1]
            angles += angles[:1]
            
            fig, ax = plt.subplots(figsize=(10, 10), subplot_kw={'polar': True})
            ax.fill(angles, values, 'b', alpha=0.1)
            ax.plot(angles, values, color='b', linewidth=2)
            
            ax.set_theta_offset(np.pi / 2)
            ax.set_theta_direction(-1)
            ax.set_thetagrids(np.degrees(angles[:-1]), categories)
            
            plt.title('安全态势雷达图 - 评分: ${{ env.SECURITY_SCORE }}', pad=20)
            plt.savefig('security-radar.png', bbox_inches='tight', dpi=120)
        except Exception as e:
            print(f"图表生成失败: {str(e)}")
            open('security-radar.png', 'a').close()
        EOF

    # ==================== 问题列表生成阶段 ====================
    - name: 生成详细问题列表
      if: ${{ matrix.is-main }}
      run: |
        # 依赖安全问题
        echo "### 🔧 依赖漏洞" > issues.md
        jq -r '.vulnerabilities[] | "- **\(.package_name)@\(.analyzed_version)**\n  - 漏洞ID: \(.vulnerability_id)\n  - 描述: \(.advisory)"' safety.json >> issues.md || echo "无依赖漏洞" >> issues.md

        # 代码安全问题
        echo "\n### ⚠️ 代码风险" >> issues.md
        jq -r '.results[] | "- **\(.issue_severity)级别** [\(.location.file)#行号\(.location.line)]\n  - 问题: \(.issue_text)\n  - 置信度: \(.issue_confidence)"' bandit.json >> issues.md || echo "无代码安全问题" >> issues.md

        # 敏感信息
        echo "\n### 🔑 敏感信息检测" >> issues.md
        jq -r '.[] | "- 在「\(.path)」发现 \(.type)\n  - 签名: \(.signature)\n  - 上下文: \(.context)"' trufflehog.json >> issues.md || echo "未发现敏感信息" >> issues.md

        # 许可证问题
        echo "\n### 📜 许可证异常" >> issues.md
        jq -r '.[] | select(.License | test("^MIT$|^Apache-2.0$|^BSD-") | not) | "- **\(.Name)** 使用非标准协议: \(.License)"' licenses.json >> issues.md || echo "所有依赖许可证合规" >> issues.md

        # 格式优化
        sed -i 's/\([^ ]\)$/\1\n/g' issues.md

    # ==================== 云端归档阶段 ====================
    - name: 配置腾讯云存储
      if: ${{ matrix.is-main }}
      run: |
        coscmd config -a ${{ secrets.COS_SECRET_ID }} \
                     -s ${{ secrets.COS_SECRET_KEY }} \
                     -b ${{ secrets.COS_BUCKET }} \
                     -r ${{ secrets.COS_REGION }} > /dev/null 2>&1

    - name: 归档分析结果
      if: ${{ matrix.is-main }}
      run: |
        ARCHIVE_DIR="security-reports/$(date +"%Y%m%d")/run-${{ github.run_number }}"
        
        coscmd upload -f security-radar.png "${ARCHIVE_DIR}/security-radar.png" || echo "文件上传失败"
        coscmd upload -f safety.json "${ARCHIVE_DIR}/safety.json" || true
        coscmd upload -f bandit.json "${ARCHIVE_DIR}/bandit.json" || true
        
        echo "REPORT_URL=https://pr.mizhoubaobei.top/${ARCHIVE_DIR}/security-radar.png" >> $GITHUB_ENV

    # ==================== 审查结果反馈 ====================
    - name: 提交PR审查报告
      if: ${{ matrix.is-main }}
      uses: actions/github-script@v7
      env:
        SCORE: ${{ env.SECURITY_SCORE }}
        RATING: ${{ env.SECURITY_RATING }}
      with:
        script: |
          const fs = require('fs').promises;
          
          async function renderMarkdown(text) {
            const { data } = await github.rest.markdown.render({
              text: text,
              mode: 'gfm',
              context: context.repo.repo,
            });
            return data;
          }

          try {
            const issuesContent = await fs.readFile('issues.md', 'utf8');
            
            const fullReport = `
            ## 🔐 代码安全审查报告 - ${process.env.RATING}
            **综合评分**: ${process.env.SCORE}/100

            ### 安全指标概览
            | 检查项         | 问题数量 |
            |---------------|----------|
            | 依赖漏洞      | ${process.env.SAFETY_ISSUES} |
            | 高危代码问题  | ${process.env.HIGH_RISK_ISSUES} |
            | 中危代码问题  | ${process.env.MEDIUM_RISK_ISSUES} |
            | 敏感信息泄露  | ${process.env.SECRETS_FOUND} |
            | 许可协议问题  | ${process.env.LICENSE_ISSUES} |

            ![安全态势图](${process.env.REPORT_URL}?t=${new Date().getTime()})

            ### 问题详情清单
            ${await renderMarkdown(issuesContent)}
            
            **扫描详情**: [查看完整报告](${process.env.REPORT_URL})
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fullReport
            });
          } catch (error) {
            core.error(`报告生成失败: ${error}`);
            core.setFailed(error.message);
          }

    # ==================== 质量门禁控制 ====================
    - name: 执行质量阻断
      if: ${{ matrix.is-main && env.SECURITY_SCORE < 60 }}
      run: |
        echo "::error::安全评分不足（当前：${{ env.SECURITY_SCORE }}/100），最低通过分数为60分"
        echo "问题摘要："
        echo "- 依赖漏洞: ${{ env.SAFETY_ISSUES }} 个"
        echo "- 高危问题: ${{ env.HIGH_RISK_ISSUES }} 个"
        echo "- 敏感信息: ${{ env.SECRETS_FOUND }} 处"
        exit 1